"""
3Sigma Partners - Wealth Manager Portfolio Dashboard (CAS PDF + CSV/XLSX)
============================================================================
Single-file Streamlit app tailored for advisers. It:
- **Parses CAMS/KFintech CAS PDFs** via `casparser` (supports password)
- Also accepts **CSV/XLSX** transaction exports (brokers/MF statements)
- Computes **XIRR** per holding & portfolio, optional **TWR** when price history is available
- Deep-dive analytics: **allocation (asset/sector/mcap)**, **concentration & HHI**, **top/bottom contributors**, **cashflow timeline**, **rolling returns**, **drawdowns**, **realized P&L**
- **Benchmark comparison**: Nifty 50, Next 50, Midcap, Smallcap (via yfinance)
- **Export** branded **Excel** & **PDF** reports, with **Advisor Notes** section

Run:
    streamlit run 3Sigma_Partners_portfolio_dashboard.py

Install (recommended):
    pip install -U streamlit pandas numpy matplotlib plotly xlsxwriter openpyxl yfinance casparser reportlab

Notes:
- CAS PDFs are often **password protected** (PAN in uppercase without spaces, or per AMC/email). Provide it in the sidebar when uploading a PDF.
- Price/TWR/benchmark charts need internet + `yfinance` to fetch series.
- The CSV/XLSX parser is schema-agnostic with best-effort column inference; adjust `COLUMN_ALIASES` to your file if needed.
"""

import streamlit as st
import pandas as pd
import numpy as np
import io
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import plotly.express as px
import plotly.graph_objects as go
from dataclasses import dataclass

# Optional deps
try:
    import yfinance as yf
    YFINANCE_AVAILABLE = True
except Exception:
    YFINANCE_AVAILABLE = False

try:
    from casparser import read_cas_pdf
    CASPARSER_AVAILABLE = True
except Exception:
    CASPARSER_AVAILABLE = False

st.set_page_config(page_title="3Sigma Partners - Portfolio Dashboard", layout="wide")

# ============================== Config ===============================
BRAND = "3Sigma Partners"
RISK_FREE_DEFAULT = 0.055  # 5.5% annual for Sharpe calc (editable in UI)

COLUMN_ALIASES = {
    'date': ['date', 'transaction date', 'trade date', 'settlement date', 'value date'],
    'security': ['security', 'scheme', 'scheme name', 'name', 'scrip', 'symbol', 'description'],
    'type': ['type', 'tran type', 'transaction type', 'buy/sell', 'buy sell', 'txn'],
    'quantity': ['quantity', 'qty', 'no. of units', 'units', 'shares'],
    'price': ['price', 'rate', 'nav', 'trade price'],
    'amount': ['amount', 'value', 'transaction value', 'net amount', 'gross amount'],
    'isin': ['isin'],
    'sector': ['sector'],
    'mcap': ['marketcap', 'market cap', 'marketcapcategory', 'market cap category', 'mcap']
}

# ============================== Helpers =============================

def map_columns(df: pd.DataFrame) -> pd.DataFrame:
    cols = [c.lower() for c in df.columns]
    def pick(options):
        for o in options:
            if o in cols:
                return df.columns[cols.index(o)]
        return None
    out = pd.DataFrame()
    out['Date'] = pd.to_datetime(df[pick(COLUMN_ALIASES['date'])]) if pick(COLUMN_ALIASES['date']) else pd.NaT
    out['Security'] = df[pick(COLUMN_ALIASES['security'])] if pick(COLUMN_ALIASES['security']) else np.nan
    out['Type'] = df[pick(COLUMN_ALIASES['type'])].astype(str).str.upper() if pick(COLUMN_ALIASES['type']) else ""
    out['Quantity'] = pd.to_numeric(df[pick(COLUMN_ALIASES['quantity'])], errors='coerce') if pick(COLUMN_ALIASES['quantity']) else 0.0
    out['Price'] = pd.to_numeric(df[pick(COLUMN_ALIASES['price'])], errors='coerce') if pick(COLUMN_ALIASES['price']) else np.nan
    out['Amount'] = pd.to_numeric(df[pick(COLUMN_ALIASES['amount'])], errors='coerce') if pick(COLUMN_ALIASES['amount']) else np.nan
    out['ISIN'] = df[pick(COLUMN_ALIASES['isin'])] if pick(COLUMN_ALIASES['isin']) else ""
    out['Sector'] = df[pick(COLUMN_ALIASES['sector'])] if pick(COLUMN_ALIASES['sector']) else ""
    out['MarketCapCategory'] = df[pick(COLUMN_ALIASES['mcap'])] if pick(COLUMN_ALIASES['mcap']) else ""
    return out


def parse_upload(upload, password: str | None):
    """Return a canonical transaction DataFrame with columns:
    Date, Security, Type, Quantity, Price, Amount, ISIN, Sector, MarketCapCategory
    Supports PDF (CAS) via casparser and CSV/XLSX generically.
    """
    if upload is None:
        return None, {}
    name = upload.name.lower()
    meta = {}

    if name.endswith('.pdf'):
        if not CASPARSER_AVAILABLE:
            st.error("CAS PDF detected but `casparser` is not installed. Run: pip install casparser")
            return None, meta
        try:
            content = upload.read()
            result = read_cas_pdf(content, password=password or "")
            # result is a dict with keys like 'transactions', 'folios', 'investor_info'
            txns = result.get('transactions', [])
            meta['investor'] = result.get('investor_info', {})
            if len(txns) == 0:
                st.error("CAS parsed but found no transactions. Check password or file contents.")
                return None, meta
            df = pd.DataFrame(txns)
            # Common casparser fields: date, scheme, folio, txn_type, units, nav, amount
            rename_map = {
                'date': 'Date', 'scheme': 'Security', 'txn_type': 'Type',
                'units': 'Quantity', 'nav': 'Price', 'amount': 'Amount', 'isin': 'ISIN'
            }
            for k, v in rename_map.items():
                if k in df.columns:
                    df[v] = df[k]
            # Standardize types
            df['Date'] = pd.to_datetime(df['Date'])
            df['Type'] = df['Type'].astype(str).str.upper()
            for c in ['Quantity','Price','Amount']:
                if c in df.columns:
                    df[c] = pd.to_numeric(df[c], errors='coerce')
            df['Sector'] = ""  # CAS doesn't include sector
            df['MarketCapCategory'] = ""  # not in CAS
            txn = df[['Date','Security','Type','Quantity','Price','Amount','ISIN','Sector','MarketCapCategory']]
            return txn, meta
        except Exception as e:
            st.exception(e)
            return None, meta

    # CSV/XLSX
    try:
        if name.endswith('.csv'):
            raw = pd.read_csv(upload)
        else:
            raw = pd.read_excel(upload)
    except Exception as e:
        st.error(f"Could not read file: {e}")
        return None, meta
    txn = map_columns(raw)
    return txn, meta


# Financial utilities -------------------------------------------------

def xnpv(rate, cashflows):
    if rate <= -1.0:
        return np.inf
    t0 = cashflows[0][0]
    return sum(cf/((1+rate)**((d - t0).days/365.0)) for d, cf in cashflows)


def xirr(cashflows, guess=0.1, tol=1e-6, maxiter=100):
    if len(cashflows) == 0:
        return np.nan
    try:
        r = guess
        for _ in range(maxiter):
            f = xnpv(r, cashflows)
            d = (xnpv(r+1e-6, cashflows)-f)/1e-6
            if d == 0:
                break
            r2 = r - f/d
            if abs(r2 - r) < tol:
                return r2
            r = r2
        return r
    except Exception:
        return np.nan


def build_cashflows(txn: pd.DataFrame, security: str | None=None):
    df = txn if security is None else txn[txn['Security'] == security]
    df = df.sort_values('Date')
    flows = []
    for _, r in df.iterrows():
        amt = r['Amount']
        if pd.isna(amt):
            if not pd.isna(r.get('Quantity')) and not pd.isna(r.get('Price')):
                amt = (r['Quantity'] * r['Price'])
            else:
                amt = 0.0
        # Convention: BUY -> negative, SELL -> positive
        t = str(r.get('Type','')).upper()
        if t.startswith('BUY') or t in ('PURCHASE','ADDITIONAL PURCHASE','REINVEST','NEW PURCHASE'):
            amt = -abs(amt)
        elif t.startswith('SELL') or t in ('REDEMPTION','SWITCH OUT'):
            amt = abs(amt)
        flows.append((pd.to_datetime(r['Date']).to_pydatetime(), float(amt)))
    return flows


def holdings_from_txn(txn: pd.DataFrame) -> pd.DataFrame:
    h = txn.groupby('Security').agg({
        'Quantity': 'sum',
        'Amount': 'sum'
    }).rename(columns={'Quantity':'NetQuantity','Amount':'NetAmount'}).reset_index()
    h['NetQuantity'] = h['NetQuantity'].fillna(0.0)
    return h


def concentration_metrics(weights: pd.Series) -> dict:
    w = weights.fillna(0).values
    hhi = (w**2).sum()  # Herfindahl-Hirschman
    top1 = float(np.max(w)) if len(w)>0 else 0.0
    top3 = float(np.sort(w)[-3:].sum()) if len(w)>=3 else float(np.sort(w).sum())
    return {'HHI': hhi, 'Top1': top1, 'Top3': top3}


def drawdown(series: pd.Series) -> pd.DataFrame:
    cummax = series.cummax()
    dd = (series/cummax - 1.0)
    return pd.DataFrame({'value': series, 'peak': cummax, 'drawdown': dd})


# ============================== UI =================================
st.title(f"{BRAND} â€” Wealth Manager Portfolio Dashboard")

with st.sidebar:
    st.header("Upload & Settings")
    up = st.file_uploader("Upload CAS PDF / CSV / XLSX", type=["pdf","csv","xlsx","xls"]) 
    cas_pwd = st.text_input("CAS PDF Password (if any)", type="password")
    st.caption("CAS password is typically PAN in uppercase without spaces, unless changed by you.")

    st.markdown("---")
    st.subheader("Benchmarks & Risk-Free")
    enable_online = st.checkbox("Enable online price fetch (yfinance)", value=True)
    benchmark_nifty = st.text_input("Nifty 50 ticker", value="^NSEI")
    benchmark_next50 = st.text_input("Nifty Next 50 ticker", value="NIFTY_NEXT50.NS")
    benchmark_mid = st.text_input("Nifty Midcap ticker", value="NIFTY_MIDCAP.NS")
    benchmark_small = st.text_input("Nifty Smallcap ticker", value="NIFTY_SMALLCAP.NS")
    rf_rate = st.number_input("Risk-free (annual, for Sharpe)", min_value=0.0, max_value=1.0, value=RISK_FREE_DEFAULT, step=0.005, format="%0.3f")

    st.markdown("---")
    st.subheader("Report Options")
    include_price_charts = st.checkbox("Include price charts in PDF", value=True)
    advisor_notes = st.text_area("Advisor Notes (included in PDF)")

# Parse upload
if up is None:
    st.info("Upload your CAS PDF or a CSV/XLSX transactions file to begin.")
    st.stop()

txn, meta = parse_upload(up, cas_pwd)
if txn is None or len(txn)==0:
    st.stop()

# Preview
st.success("File parsed successfully.")
with st.expander("Preview parsed transactions", expanded=False):
    st.dataframe(txn.head(50))

# ---------------- Summary KPIs ----------------
# Holdings and XIRR
hold = holdings_from_txn(txn)

rows = []
for s in txn['Security'].dropna().unique():
    cf = build_cashflows(txn, s)
    irr = xirr(cf)
    net_qty = float(hold.loc[hold['Security']==s, 'NetQuantity'].values[0]) if (hold['Security']==s).any() else 0.0
    last_px = txn[txn['Security']==s].sort_values('Date')['Price'].dropna().iloc[-1] if txn[txn['Security']==s]['Price'].notna().any() else np.nan
    mv = net_qty * last_px if not pd.isna(last_px) else np.nan
    rows.append({'Security': s, 'NetQuantity': net_qty, 'LastPrice': last_px, 'MarketValue': mv, 'XIRR': irr})

xirr_df = pd.DataFrame(rows).sort_values(by=['MarketValue','Security'], ascending=[False, True])

# Portfolio-level IRR
portfolio_cf = build_cashflows(txn, None)
port_irr = xirr(sorted(portfolio_cf, key=lambda x: x[0])) if len(portfolio_cf)>0 else np.nan

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Portfolio XIRR (annual)", f"{port_irr:.2%}" if not pd.isna(port_irr) else "N/A")
with col2:
    total_invested = -sum(a for _, a in portfolio_cf if a<0)
    st.metric("Total Invested", f"â‚¹{total_invested:,.0f}")
with col3:
    approx_mv = xirr_df['MarketValue'].sum(skipna=True)
    st.metric("Approx. Market Value", f"â‚¹{approx_mv:,.0f}" if not pd.isna(approx_mv) else "â€”")

st.subheader("Holdings & XIRR")
st.dataframe(xirr_df.style.format({'LastPrice':'{:.2f}','MarketValue':'{:.0f}','XIRR':'{:.2%}'}))

# ---------------- Allocation ----------------
st.subheader("Allocation Insights")

# Asset/Sector/MCAP if available
left, right = st.columns(2)
with left:
    if txn['Sector'].notna().any():
        sec_mv = txn.assign(EstValue = np.where(txn['Price'].notna() & txn['Quantity'].notna(), txn['Price']*txn['Quantity'], txn['Amount'])) \
                   .groupby('Sector', dropna=True)['EstValue'].sum().reset_index()
        if len(sec_mv)>0:
            fig = px.pie(sec_mv, names='Sector', values='EstValue', title='Allocation by Sector')
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Sector data not present.")
    else:
        st.info("No 'Sector' in file. You can add it as a column for richer allocation charts.")

with right:
    if txn['MarketCapCategory'].notna().any():
        mcap = txn.assign(EstValue = np.where(txn['Price'].notna() & txn['Quantity'].notna(), txn['Price']*txn['Quantity'], txn['Amount'])) \
                 .groupby('MarketCapCategory', dropna=True)['EstValue'].sum().reset_index()
        if len(mcap)>0:
            fig2 = px.bar(mcap, x='MarketCapCategory', y='EstValue', title='Allocation by Market Cap')
            st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("Market-cap data not present.")
    else:
        st.info("No 'MarketCapCategory' in file.")

# Concentration
st.subheader("Concentration & Risk")
# Weight by estimated MV (fallback to invested amount if price/qty missing)
h_w = txn.assign(EstValue = np.where(txn['Price'].notna() & txn['Quantity'].notna(), txn['Price']*txn['Quantity'], txn['Amount'])) \
        .groupby('Security')['EstValue'].sum() \
        .pipe(lambda s: s/s.sum() if s.sum()!=0 else s)
metrics = concentration_metrics(h_w)
cc1, cc2, cc3 = st.columns(3)
cc1.metric("HHI (0-1)", f"{metrics['HHI']:.3f}")
cc2.metric("Top Holding Weight", f"{metrics['Top1']:.2%}")
cc3.metric("Top 3 Weight", f"{metrics['Top3']:.2%}")

st.caption("Lower HHI and balanced top weights indicate better diversification. As a rule of thumb, HHI < 0.15 is well-diversified.")

# ---------------- Cashflows & P&L ----------------
st.subheader("Cashflows & Realized P&L")
cf_df = pd.DataFrame(portfolio_cf, columns=['Date','Amount']).sort_values('Date')
cf_df['Cumulative'] = cf_df['Amount'].cumsum()
st.area_chart(cf_df.set_index('Date')[['Amount']])
st.line_chart(cf_df.set_index('Date')[['Cumulative']])

# Realized P&L from SELL/REDEMPTION transactions only (approx; ignores fees/taxes)
sell_mask = txn['Type'].str.contains('SELL|REDEMPTION|SWITCH OUT', na=False)
realized = txn[sell_mask].groupby('Security')['Amount'].sum().sort_values(ascending=False).reset_index(name='RealizedProceeds')
with st.expander("Realized Proceeds by Security"):
    st.dataframe(realized)

# ---------------- Performance vs Benchmarks ----------------
st.subheader("Performance vs Benchmarks (Indexed)")
if enable_online and YFINANCE_AVAILABLE:
    start_date = pd.to_datetime(txn['Date']).min()
    end_date = datetime.today().strftime('%Y-%m-%d')
    tickers = {
        'Nifty 50': benchmark_nifty,
        'Nifty Next 50': benchmark_next50,
        'Nifty Midcap': benchmark_mid,
        'Nifty Smallcap': benchmark_small
    }
    bench = {}
    for n, tk in tickers.items():
        try:
            ser = yf.download(tk, start=start_date, end=end_date, progress=False)['Adj Close']
            if not ser.empty:
                bench[n] = ser/ser.iloc[0]*100
        except Exception:
            pass

    # Approximate portfolio series: cumulative net value using transaction prices (best effort)
    # If per-security symbols are NSE tickers, try to fetch and value daily; else fall back to cashflow cumulative proxy.
    portfolio_ts = None
    fetched_any = False
    for s in txn['Security'].dropna().unique():
        symbol = str(s)
        if enable_online and ('.NS' in symbol or len(symbol)<=10):
            try:
                ser = yf.download(symbol, start=start_date, end=end_date, progress=False)['Adj Close']
                qty = txn[txn['Security']==s]['Quantity'].sum()
                if portfolio_ts is None:
                    portfolio_ts = ser*0
                portfolio_ts = portfolio_ts + ser*qty
                fetched_any = True
            except Exception:
                continue
    if not fetched_any or portfolio_ts is None or portfolio_ts.empty:
        df_cash = cf_df.set_index('Date')['Amount'].groupby(pd.Grouper(freq='D')).sum().fillna(0).cumsum()
        portfolio_ts = df_cash

    fig = go.Figure()
    try:
        fig.add_trace(go.Scatter(x=portfolio_ts.index, y=portfolio_ts/portfolio_ts.iloc[0]*100, name='Portfolio (approx)'))
    except Exception:
        pass
    for n, ser in bench.items():
        fig.add_trace(go.Scatter(x=ser.index, y=ser.values, name=n))
    fig.update_layout(yaxis_title='Indexed (100=Start)', xaxis_title='Date')
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("Online price fetch disabled or yfinance not available. Enable it in the sidebar to see benchmark charts.")

# Drawdowns (on portfolio_ts if available)
if 'fig' in locals():
    try:
        # Reconstruct portfolio series from plotted data if needed
        port_series = portfolio_ts
        dd = drawdown(pd.Series(port_series))
        figdd = go.Figure()
        figdd.add_trace(go.Scatter(x=dd.index, y=dd['drawdown'], name='Drawdown'))
        figdd.update_layout(yaxis_tickformat=",.0%", title='Portfolio Drawdown', xaxis_title='Date')
        st.plotly_chart(figdd, use_container_width=True)
    except Exception:
        pass

# ---------------- Export ----------------
st.subheader("Export Reports")

def excel_bytes():
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        # Summary sheet
        pd.DataFrame([
            {'GeneratedOn': datetime.now(), 'PortfolioXIRR': port_irr, 'TotalInvested': total_invested, 'ApproxMarketValue': approx_mv}
        ]).to_excel(writer, sheet_name='Summary', index=False)
        txn.to_excel(writer, sheet_name='Transactions', index=False)
        xirr_df.to_excel(writer, sheet_name='Holdings_XIRR', index=False)
    return output.getvalue()

st.download_button(f"Download Excel Summary ({BRAND})", excel_bytes(), file_name=f"{BRAND.replace(' ','_')}_summary.xlsx")


def pdf_bytes(include_charts=True):
    buf = io.BytesIO()
    with PdfPages(buf) as pdf:
        # Cover
        fig = plt.figure(figsize=(8.27, 11.69))  # A4
        ax = fig.add_subplot(1,1,1)
        ax.axis('off')
        ax.text(0.5, 0.8, BRAND, fontsize=28, ha='center')
        ax.text(0.5, 0.74, 'Portfolio Review', fontsize=18, ha='center')
        ax.text(0.5, 0.68, f"Generated: {datetime.now():%Y-%m-%d %H:%M}", ha='center')
        if meta.get('investor'):
            inv = meta['investor']
            ax.text(0.5, 0.62, f"Investor: {inv.get('name','')}", ha='center')
        if advisor_notes:
            ax.text(0.5, 0.56, "Advisor Notes:", fontsize=12, ha='center')
            ax.text(0.5, 0.52, advisor_notes[:3000], wrap=True, ha='center')
        pdf.savefig(fig); plt.close(fig)

        # Holdings table
        fig, ax = plt.subplots(figsize=(8.27, 11.69))
        ax.axis('off')
        ax.set_title('Holdings & XIRR')
        tdf = xirr_df.copy()
        tdf['XIRR'] = tdf['XIRR'].apply(lambda x: f"{x:.2%}" if not pd.isna(x) else 'N/A')
        show = tdf[['Security','NetQuantity','LastPrice','MarketValue','XIRR']].head(45)
        ax.table(cellText=show.values, colLabels=show.columns, loc='center')
        pdf.savefig(fig); plt.close(fig)

        # Optional charts (benchmarks)
        if include_charts and enable_online and YFINANCE_AVAILABLE:
            try:
                # Simple Nifty 50 panel
                start_date = pd.to_datetime(txn['Date']).min()
                end_date = datetime.today().strftime('%Y-%m-%d')
                ser = yf.download(benchmark_nifty, start=start_date, end=end_date, progress=False)['Adj Close']
                fig = plt.figure(figsize=(8.27, 4))
                plt.plot(ser.index, ser.values)
                plt.title('Nifty 50 (Adj Close)')
                pdf.savefig(fig); plt.close(fig)
            except Exception:
                pass
    buf.seek(0)
    return buf.read()

st.download_button(f"Download PDF Report ({BRAND})", pdf_bytes(include_charts=include_price_charts), file_name=f"{BRAND.replace(' ','_')}_report.pdf", mime='application/pdf')

st.markdown("---")
st.caption(f"{BRAND} â€” Advisory dashboard. Best-effort parsing for CAS/CSV/XLSX. For bespoke mapping (sector, market-cap, tickers), upload a sample and we will tailor the parser.")
